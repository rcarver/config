set -e

mkdir -p /etc/config

cd /etc/config

if [ ! -d project ]; then
  echo '[cloning project: <%= git_uri %>]'
  git clone <%= git_uri %> project
fi

echo '[installing project scripts]'


echo '#!/bin/bash
# Update the project and execute on this node.
set -e
if [ $UID -ne 0 ]; then
  echo 'Must run as root'
  exit 1
fi
cd /etc/config/project
# Require that the working directory has no uncommited changes.
if [ -n "$(git status --porcelain)" ]; then
  echo "git repo is not totally clean." >&2
  exit 1
fi
# Pull in the latest changes cleanly.
git pull --rebase
# Update dependencies.
config-bundle install
# Update the database.
config-bundle exec config-update-database
# Execute.
config-bundle exec config-exec-node `hostname`
' > /usr/local/sbin/config-run-now


echo '#!/bin/bash
# Run config with protection.
set -e
if [ -f /etc/config/disabled ]; then
  echo "config is disabled. Use config-enable or remove /etc/config/disabled" >&2
  exit 1
fi
flock --nonblock --exclusive /var/lock/config --command config-run-now
' > /usr/local/sbin/config-run-protected


echo '#!/bin/bash
# Run config with sudo.
sudo config-run-protected
' > /usr/local/sbin/config-run


echo '#!/bin/bash
# Disable config.
if [ ! -f /etc/config/disabled ]; then
  sudo touch /etc/config/disabled
fi
' > /usr/local/sbin/config-disable


echo '#!/bin/bash
# Enable config.
if [ -f /etc/config/disabled ]; then
  sudo rm /etc/config/disabled
fi
' > /usr/local/sbin/config-enable


chmod 755 /usr/local/sbin/config-run-now
chmod 755 /usr/local/sbin/config-run-protected
chmod 755 /usr/local/sbin/config-run
chmod 755 /usr/local/sbin/config-disable
chmod 755 /usr/local/sbin/config-enable


# TODO: We might want to add a --bootstrap flag to config-run
# to indicate that this node should NOT exist. Otherwise you
# might be creating a duplicate node. If we did that, we'd want
# to call config-run with/without --bootstrap as appropriate,
# probably dependent on the project existing?

echo '[starting config-run]'
config-run
